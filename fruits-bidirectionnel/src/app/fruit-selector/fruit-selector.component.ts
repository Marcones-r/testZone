// ===============================
// fruit-selector.component.ts
// ===============================

// Importation des √©l√©ments essentiels d'Angular pour cr√©er un composant et g√©rer les entr√©es/sorties
import { Component, Input, Output, EventEmitter } from '@angular/core';

// D√©claration du composant Angular autonome (standalone)
@Component({
  selector: 'app-fruit-selector', // Nom de la balise utilis√©e dans le parent
  standalone: true,               // Indique que ce composant n'a pas besoin de NgModule
  // Template inline avec du HTML directement dans le code TS
  template: `                     
    <p>Fruit propos√© par le parent : <strong>{{ fruit }}</strong></p> <!-- Affiche le fruit re√ßu -->
    <button (click)="ajouterAuPanier()">Ajouter au panier</button>     <!-- Bouton avec √©couteur d'√©v√©nement click -->
  `
})
export class FruitSelectorComponent {
  // ------------------
  // PROPRI√âT√â @Input
  // ------------------
  // @Input() : d√©corateur Angular qui permet de recevoir une valeur depuis le composant parent
  // fruit : nom de la propri√©t√© locale
  // string : typage TypeScript ‚Üí cette propri√©t√© attend une cha√Æne de caract√®res
  // = 'üçé Pomme' : valeur par d√©faut si le parent n'envoie rien
  @Input() fruit: string = 'üçé Pomme';

  // ------------------
  // PROPRI√âT√â @Output
  // ------------------
  // @Output() : d√©corateur Angular qui rend la propri√©t√© √©coutable par le parent
  // fruitAdded : nom de l'√©v√©nement personnalis√©
  // new EventEmitter<string>() : cr√©ation d'un √©metteur d'√©v√©nement qui envoie une cha√Æne de caract√®res
  @Output() fruitAdded = new EventEmitter<string>();

  // ------------------
  // M√âTHODE ajouterAuPanier()
  // ------------------
  // Fonction appel√©e lors du clic sur le bouton
  // Elle √©met la valeur du fruit courant au parent en utilisant fruitAdded.emit()
  ajouterAuPanier() {
    this.fruitAdded.emit(this.fruit); // Envoie l'information vers le parent
  }
}
